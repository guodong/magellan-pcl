# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: p4/bm/dataplane_interface.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='p4/bm/dataplane_interface.proto',
  package='p4.bm',
  syntax='proto3',
  serialized_pb=_b('\n\x1fp4/bm/dataplane_interface.proto\x12\x05p4.bm\"R\n\x13PacketStreamRequest\x12\n\n\x02id\x18\x01 \x01(\x04\x12\x11\n\tdevice_id\x18\x02 \x01(\x04\x12\x0c\n\x04port\x18\x03 \x01(\r\x12\x0e\n\x06packet\x18\x04 \x01(\x0c\"S\n\x14PacketStreamResponse\x12\n\n\x02id\x18\x01 \x01(\x04\x12\x11\n\tdevice_id\x18\x02 \x01(\x04\x12\x0c\n\x04port\x18\x03 \x01(\r\x12\x0e\n\x06packet\x18\x04 \x01(\x0c\"g\n\x18SetPortOperStatusRequest\x12\x11\n\tdevice_id\x18\x01 \x01(\x04\x12\x0c\n\x04port\x18\x02 \x01(\r\x12*\n\x0boper_status\x18\x03 \x01(\x0e\x32\x15.p4.bm.PortOperStatus\"\x1b\n\x19SetPortOperStatusResponse*S\n\x0ePortOperStatus\x12\x17\n\x13OPER_STATUS_UNKNOWN\x10\x00\x12\x14\n\x10OPER_STATUS_DOWN\x10\x01\x12\x12\n\x0eOPER_STATUS_UP\x10\x02\x32\xbd\x01\n\x12\x44\x61taplaneInterface\x12M\n\x0cPacketStream\x12\x1a.p4.bm.PacketStreamRequest\x1a\x1b.p4.bm.PacketStreamResponse\"\x00(\x01\x30\x01\x12X\n\x11SetPortOperStatus\x12\x1f.p4.bm.SetPortOperStatusRequest\x1a .p4.bm.SetPortOperStatusResponse\"\x00\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

_PORTOPERSTATUS = _descriptor.EnumDescriptor(
  name='PortOperStatus',
  full_name='p4.bm.PortOperStatus',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='OPER_STATUS_UNKNOWN', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='OPER_STATUS_DOWN', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='OPER_STATUS_UP', index=2, number=2,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=345,
  serialized_end=428,
)
_sym_db.RegisterEnumDescriptor(_PORTOPERSTATUS)

PortOperStatus = enum_type_wrapper.EnumTypeWrapper(_PORTOPERSTATUS)
OPER_STATUS_UNKNOWN = 0
OPER_STATUS_DOWN = 1
OPER_STATUS_UP = 2



_PACKETSTREAMREQUEST = _descriptor.Descriptor(
  name='PacketStreamRequest',
  full_name='p4.bm.PacketStreamRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='p4.bm.PacketStreamRequest.id', index=0,
      number=1, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='device_id', full_name='p4.bm.PacketStreamRequest.device_id', index=1,
      number=2, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='port', full_name='p4.bm.PacketStreamRequest.port', index=2,
      number=3, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='packet', full_name='p4.bm.PacketStreamRequest.packet', index=3,
      number=4, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=42,
  serialized_end=124,
)


_PACKETSTREAMRESPONSE = _descriptor.Descriptor(
  name='PacketStreamResponse',
  full_name='p4.bm.PacketStreamResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='p4.bm.PacketStreamResponse.id', index=0,
      number=1, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='device_id', full_name='p4.bm.PacketStreamResponse.device_id', index=1,
      number=2, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='port', full_name='p4.bm.PacketStreamResponse.port', index=2,
      number=3, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='packet', full_name='p4.bm.PacketStreamResponse.packet', index=3,
      number=4, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=126,
  serialized_end=209,
)


_SETPORTOPERSTATUSREQUEST = _descriptor.Descriptor(
  name='SetPortOperStatusRequest',
  full_name='p4.bm.SetPortOperStatusRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='device_id', full_name='p4.bm.SetPortOperStatusRequest.device_id', index=0,
      number=1, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='port', full_name='p4.bm.SetPortOperStatusRequest.port', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='oper_status', full_name='p4.bm.SetPortOperStatusRequest.oper_status', index=2,
      number=3, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=211,
  serialized_end=314,
)


_SETPORTOPERSTATUSRESPONSE = _descriptor.Descriptor(
  name='SetPortOperStatusResponse',
  full_name='p4.bm.SetPortOperStatusResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=316,
  serialized_end=343,
)

_SETPORTOPERSTATUSREQUEST.fields_by_name['oper_status'].enum_type = _PORTOPERSTATUS
DESCRIPTOR.message_types_by_name['PacketStreamRequest'] = _PACKETSTREAMREQUEST
DESCRIPTOR.message_types_by_name['PacketStreamResponse'] = _PACKETSTREAMRESPONSE
DESCRIPTOR.message_types_by_name['SetPortOperStatusRequest'] = _SETPORTOPERSTATUSREQUEST
DESCRIPTOR.message_types_by_name['SetPortOperStatusResponse'] = _SETPORTOPERSTATUSRESPONSE
DESCRIPTOR.enum_types_by_name['PortOperStatus'] = _PORTOPERSTATUS

PacketStreamRequest = _reflection.GeneratedProtocolMessageType('PacketStreamRequest', (_message.Message,), dict(
  DESCRIPTOR = _PACKETSTREAMREQUEST,
  __module__ = 'p4.bm.dataplane_interface_pb2'
  # @@protoc_insertion_point(class_scope:p4.bm.PacketStreamRequest)
  ))
_sym_db.RegisterMessage(PacketStreamRequest)

PacketStreamResponse = _reflection.GeneratedProtocolMessageType('PacketStreamResponse', (_message.Message,), dict(
  DESCRIPTOR = _PACKETSTREAMRESPONSE,
  __module__ = 'p4.bm.dataplane_interface_pb2'
  # @@protoc_insertion_point(class_scope:p4.bm.PacketStreamResponse)
  ))
_sym_db.RegisterMessage(PacketStreamResponse)

SetPortOperStatusRequest = _reflection.GeneratedProtocolMessageType('SetPortOperStatusRequest', (_message.Message,), dict(
  DESCRIPTOR = _SETPORTOPERSTATUSREQUEST,
  __module__ = 'p4.bm.dataplane_interface_pb2'
  # @@protoc_insertion_point(class_scope:p4.bm.SetPortOperStatusRequest)
  ))
_sym_db.RegisterMessage(SetPortOperStatusRequest)

SetPortOperStatusResponse = _reflection.GeneratedProtocolMessageType('SetPortOperStatusResponse', (_message.Message,), dict(
  DESCRIPTOR = _SETPORTOPERSTATUSRESPONSE,
  __module__ = 'p4.bm.dataplane_interface_pb2'
  # @@protoc_insertion_point(class_scope:p4.bm.SetPortOperStatusResponse)
  ))
_sym_db.RegisterMessage(SetPortOperStatusResponse)


try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class DataplaneInterfaceStub(object):

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.PacketStream = channel.stream_stream(
          '/p4.bm.DataplaneInterface/PacketStream',
          request_serializer=PacketStreamRequest.SerializeToString,
          response_deserializer=PacketStreamResponse.FromString,
          )
      self.SetPortOperStatus = channel.unary_unary(
          '/p4.bm.DataplaneInterface/SetPortOperStatus',
          request_serializer=SetPortOperStatusRequest.SerializeToString,
          response_deserializer=SetPortOperStatusResponse.FromString,
          )


  class DataplaneInterfaceServicer(object):

    def PacketStream(self, request_iterator, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def SetPortOperStatus(self, request, context):
      """A one-way RPC to set the operational status of a given port (by default all
      ports are valid and "UP"). This is useful in the context of testing, to
      simulate port-up / port-down events.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_DataplaneInterfaceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'PacketStream': grpc.stream_stream_rpc_method_handler(
            servicer.PacketStream,
            request_deserializer=PacketStreamRequest.FromString,
            response_serializer=PacketStreamResponse.SerializeToString,
        ),
        'SetPortOperStatus': grpc.unary_unary_rpc_method_handler(
            servicer.SetPortOperStatus,
            request_deserializer=SetPortOperStatusRequest.FromString,
            response_serializer=SetPortOperStatusResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'p4.bm.DataplaneInterface', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaDataplaneInterfaceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def PacketStream(self, request_iterator, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def SetPortOperStatus(self, request, context):
      """A one-way RPC to set the operational status of a given port (by default all
      ports are valid and "UP"). This is useful in the context of testing, to
      simulate port-up / port-down events.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaDataplaneInterfaceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def PacketStream(self, request_iterator, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    def SetPortOperStatus(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """A one-way RPC to set the operational status of a given port (by default all
      ports are valid and "UP"). This is useful in the context of testing, to
      simulate port-up / port-down events.
      """
      raise NotImplementedError()
    SetPortOperStatus.future = None


  def beta_create_DataplaneInterface_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('p4.bm.DataplaneInterface', 'PacketStream'): PacketStreamRequest.FromString,
      ('p4.bm.DataplaneInterface', 'SetPortOperStatus'): SetPortOperStatusRequest.FromString,
    }
    response_serializers = {
      ('p4.bm.DataplaneInterface', 'PacketStream'): PacketStreamResponse.SerializeToString,
      ('p4.bm.DataplaneInterface', 'SetPortOperStatus'): SetPortOperStatusResponse.SerializeToString,
    }
    method_implementations = {
      ('p4.bm.DataplaneInterface', 'PacketStream'): face_utilities.stream_stream_inline(servicer.PacketStream),
      ('p4.bm.DataplaneInterface', 'SetPortOperStatus'): face_utilities.unary_unary_inline(servicer.SetPortOperStatus),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_DataplaneInterface_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('p4.bm.DataplaneInterface', 'PacketStream'): PacketStreamRequest.SerializeToString,
      ('p4.bm.DataplaneInterface', 'SetPortOperStatus'): SetPortOperStatusRequest.SerializeToString,
    }
    response_deserializers = {
      ('p4.bm.DataplaneInterface', 'PacketStream'): PacketStreamResponse.FromString,
      ('p4.bm.DataplaneInterface', 'SetPortOperStatus'): SetPortOperStatusResponse.FromString,
    }
    cardinalities = {
      'PacketStream': cardinality.Cardinality.STREAM_STREAM,
      'SetPortOperStatus': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'p4.bm.DataplaneInterface', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
